# workflow
name: Deploy to AWS EC2 using Docker

# event
on:
  #pr이 승인되었을 때 자동으로 배포되게 설정
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: hanmin129/min
  EC2_HOST: ${{ secrets.EC2_URL }}
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  CONTAINER_NAME: foco_container


jobs:
  #job1
  build-and-push-docker:

    # runner
    runs-on: ubuntu-latest

    # step
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3 # action
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # job2
  deploy-to-ec2:

    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Create .env file
        run: |
          cat <<EOF > .env
          ${{ secrets.ENV }}
          EOF

      - name: SCP .env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: ".env"
          target: "/home/ubuntu/secrets"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          port: 22
          key: ${{ env.PRIVATE_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -aq -f name=${{ env.CONTAINER_NAME }})

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            IMAGE_ID=$(sudo docker images -q ${{ env.DOCKER_IMAGE_NAME }})

            if [ ! -z "$IMAGE_ID" ]; then
              sudo docker rmi $IMAGE_ID
            fi

            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}

            sudo docker run --name ${{ env.CONTAINER_NAME }} \
              -d \
              -p 80:8080 \
              -e RDS_URL="${{ secrets.RDS_URL }}" \
              -e RDS_USERNAME="${{ secrets.RDS_USERNAME }}" \
              -e RDS_PASSWORD="${{ secrets.RDS_PASSWORD }}" \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} \
              -e JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }} \
              -e OAUTH_GOOGLE_CLIENT_ID=${{ secrets.OAUTH_GOOGLE_CLIENT_ID }} \
              -e OAUTH_GOOGLE_CLIENT_SECRET=${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }} \
              -e OAUTH_GOOGLE_REDIRECT_URI=${{ secrets.OAUTH_GOOGLE_REDIRECT_URI }} \
              ${{ env.DOCKER_IMAGE_NAME }}